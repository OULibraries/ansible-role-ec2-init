---
- name: Set instance default user and key to 1st user in vars
  set_fact:
    ec2_instance_default_user_name: "{{ item.1.name }}"
    ec2_key_name: "{{ item.1.keyname }}"
    ec2_key_material: "{{ item.1.pubkey }}"
  when: (item.0 == 0)
  with_indexed_items:
    - "{{ users }}"

- name: ec2 key
  ec2_key:
    name: "{{ hostvars['localhost']['ec2_key_name'] }}"
    key_material: "{{ hostvars['localhost']['ec2_key_material'] }}"
    region: "{{ ec2_default_region }}"
    state: present

- name: Configure EC2 Security Groups.
  ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    region: "{{ ec2_default_region }}"
    vpc_id: "{{ ec2_default_vpc_id }}"
    state: present
    rules: "{{ item.rules }}"
    rules_egress: "{{ item.rules_egress }}"
  with_items: "{{ ec2_security_groups }}"

- name: Launch instance
  ec2:
    key_name: "{{ hostvars['localhost']['ec2_key_name'] }}"
    instance_type: "{{ item.ec2_instance_type }}"
    private_ip: "{{ item.ec2_private_ip | default(omit) }}"
    image: "{{ item.ec2_image | default(ec2_default_image) }}"
    instance_profile_name: "{{ item.ec2_instance_profile_name | default(ec2_default_instance_profile_name) }}"
    user_data: "{{ item.ec2_user_data }}"
    wait: yes
    group: "{{ item.ec2_security_group }}"
    instance_tags:
      Name: "{{ item.ec2_tag_Name }}"
      Environment: "{{ item.ec2_tag_Environment }}"
      Product: "{{ item.ec2_tag_Product }}"
      Role: "{{ item.ec2_tag_Role }}"
      Unit: "{{ item.ec2_tag_Unit }}"
      State: Unprovisioned
    exact_count: "{{ item.ec2_exact_count | default(ec2_default_exact_count) }}"
    count_tag:
      Name: "{{ item.ec2_tag_Name }}"
    vpc_subnet_id: "{{ item.ec2_vpc_subnet_id | default(ec2_default_vpc_subnet_id) }}"
    assign_public_ip: yes
    region: "{{ item.ec2_region | default(ec2_default_region) }}"
    volumes: "{{ item.ec2_volumes | default(ec2_default_volumes) }}"
  register: ec2
  with_items: "{{ ec2_instances }}"

- name: Wait 3 minutes
  wait_for: timeout=180
  when: ec2.changed == True

- name: Gather ec2 facts
  ec2_remote_facts:
    region: "{{ ec2_default_region }}"
    filters:
      instance-state-name: running
      subnet-id: "{{ ec2_default_vpc_subnet_id }}"
      "tag:State": Unprovisioned
  register: ec2_post_info

- name: Add unprovisioned instances to host group
  add_host:
    hostname: "{{ item.tags.Name }}"
    groupname: "ec2.unprovisioned"
  when: (item.tags.State == "Unprovisioned")
  with_items: "{{ ec2_post_info.instances }}"

- name: Set as local fact
  set_fact:
    ec2_post_info: "{{ ec2_post_info }}"
  when: ((ec2_post_info is defined) and (ec2_post_info is not none))
