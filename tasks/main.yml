---
- name: Set instance default user and key to 1st user in vars
  set_fact:
    ec2_instance_default_user_name: "{{ item.1.name }}"
    ec2_key_name: "{{ item.1.keyname }}"
    ec2_key_material: "{{ item.1.pubkey }}"
  with_indexed_items: "{{ users }}"
  when: item.0 == 0
- name: ec2 key
  ec2_key:
    name: "{{ hostvars['localhost']['ec2_key_name'] }}"
    key_material: "{{ hostvars['localhost']['ec2_key_material'] }}"
    region: "{{ ec2_region }}"
    state: present
- name: Configure EC2 Security Groups.
  ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    region: "{{ ec2_region }}"
    vpc_id: "{{ ec2_vpc_id }}"
    state: present
    rules: "{{ item.rules }}"
    rules_egress: "{{ item.rules_egress }}"
  with_items: ec2_security_groups

- name: Launch instance
  ec2:
    key_name: "{{ hostvars['localhost']['ec2_key_name'] }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_image }}"
    instance_profile_name: "{{ ec2_instance_profile_name }}"
    user_data: |
      #cloud-config
      system_info:
        default_user:
          name: "{{ hostvars['localhost']['ec2_instance_default_user_name'] }}"
    wait: yes
    group: "{{ item.ec2_security_group }}"
    instance_tags:
      Name: "{{ item.ec2_tag_Name }}"
      Unit: "{{ item.ec2_tag_Unit }}"
      Workload: "{{ item.ec2_tag_Workload }}"
      State: Unprovisioned
      App: "{{ item.ec2_tag_App }}"
    exact_count: "{{ ec2_exact_count }}"
    count_tag:
      Name: "{{ item.ec2_tag_Name }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
    assign_public_ip: yes
    region: "{{ ec2_region }}"
    volumes:
    - device_name: /dev/sda1
      device_type: gp2
      volume_size: "{{ ec2_volume_size }}"
      delete_on_termination: true
  register: ec2
  with_items: ec2_instances

- name: Wait 3 minutes
  wait_for: timeout=180
  when: ec2.changed == True

- name: Add instance to host group
  add_host: hostname={{ ec2_tag_Name }}
    groupname=ec2.unprovisioned
  when: ec2.changed == True

- name: Gather ec2 facts
  ec2_remote_facts:
    region: "{{ ec2_region }}"
    filters:
      instance-state-name: running
      subnet-id: "{{ ec2_vpc_subnet_id }}"
      "tag:State": Unprovisioned
  register: ec2_post_info

- name: Set as local fact
  set_fact:
#    server_tag_name: "{{ ec2_tag_Name }}"
#    server_tag_workload: "{{ ec2_tag_Workload }}"
#    instance_id: "{{ item.id }}"
#    server_ip: "{{ item.private_ip_address }}"
#    region: "{{ item.region }}"
    ec2_post_info: "{{ ec2_post_info }}"
#  with_items: "{{ ec2_post_info.instances }}"
